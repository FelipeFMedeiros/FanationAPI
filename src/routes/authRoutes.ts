import { Router } from 'express';
import { AuthController } from '../controllers/authController';
import { bruteForceProtection } from '../middleware/bruteForce';
import { authenticateToken, requireAdmin } from '../middleware/auth';

console.log('üìÅ Carregando authRoutes.ts:\t\t' + new Date().toISOString());

const router = Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     LoginRequest:
 *       type: object
 *       required:
 *         - password
 *       properties:
 *         password:
 *           type: string
 *           description: Senha para autentica√ß√£o
 *       example:
 *         password: "senha123"
 *
 *     CreateUserRequest:
 *       type: object
 *       required:
 *         - name
 *         - password
 *       properties:
 *         name:
 *           type: string
 *           description: Nome do usu√°rio
 *         password:
 *           type: string
 *           minLength: 4
 *           description: Senha do usu√°rio
 *         description:
 *           type: string
 *           description: Descri√ß√£o opcional do usu√°rio
 *       example:
 *         name: "Jo√£o Silva"
 *         password: "senha123"
 *         description: "Usu√°rio da equipe de marketing"
 *
 *     UpdateUserRequest:
 *       type: object
 *       required:
 *         - userId
 *       properties:
 *         userId:
 *           type: string
 *           description: ID do usu√°rio
 *         name:
 *           type: string
 *           description: Novo nome do usu√°rio
 *         description:
 *           type: string
 *           description: Nova descri√ß√£o do usu√°rio
 *       example:
 *         userId: "507f1f77bcf86cd799439011"
 *         name: "Jo√£o Santos"
 *         description: "Gerente de marketing"
 *
 *     DeleteUserRequest:
 *       type: object
 *       required:
 *         - userId
 *       properties:
 *         userId:
 *           type: string
 *           description: ID do usu√°rio a ser deletado
 *       example:
 *         userId: "507f1f77bcf86cd799439011"
 *
 *     UpdatePasswordRequest:
 *       type: object
 *       required:
 *         - currentPassword
 *         - newPassword
 *       properties:
 *         currentPassword:
 *           type: string
 *           description: Senha atual
 *         newPassword:
 *           type: string
 *           minLength: 4
 *           description: Nova senha
 *       example:
 *         currentPassword: "senhaAtual123"
 *         newPassword: "novaSenha456"
 *
 *     ApiResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *         message:
 *           type: string
 *         error:
 *           type: string
 *
 *     UserInfo:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         name:
 *           type: string
 *         role:
 *           type: string
 *
 *     LoginResponse:
 *       allOf:
 *         - $ref: '#/components/schemas/ApiResponse'
 *         - type: object
 *           properties:
 *             token:
 *               type: string
 *               description: JWT token para autentica√ß√£o
 *             user:
 *               $ref: '#/components/schemas/UserInfo'
 *
 *     UserDetails:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         name:
 *           type: string
 *         role:
 *           type: string
 *         description:
 *           type: string
 *         createdAt:
 *           type: string
 *           format: date-time
 *         createdBy:
 *           type: string
 *         creatorName:
 *           type: string
 */

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Realizar login
 *     tags: [Autentica√ß√£o]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginRequest'
 *     responses:
 *       200:
 *         description: Login realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/LoginResponse'
 *       400:
 *         description: Dados inv√°lidos
 *       401:
 *         description: Senha incorreta
 *       429:
 *         description: Muitas tentativas de login
 */
router.post('/login', bruteForceProtection, AuthController.login);

/**
 * @swagger
 * /api/auth/validate:
 *   get:
 *     summary: Validar token de acesso
 *     tags: [Autentica√ß√£o]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Token v√°lido
 *         content:
 *           application/json:
 *             schema:
 *               allOf:
 *                 - $ref: '#/components/schemas/ApiResponse'
 *                 - type: object
 *                   properties:
 *                     user:
 *                       $ref: '#/components/schemas/UserInfo'
 *       401:
 *         description: Token inv√°lido ou expirado
 */
router.get('/validate', authenticateToken, AuthController.validateToken);

/**
 * @swagger
 * /api/auth/users:
 *   post:
 *     summary: Criar novo usu√°rio
 *     description: Permite que usu√°rios autenticados criem novos usu√°rios
 *     tags: [Gerenciamento de Usu√°rios]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateUserRequest'
 *     responses:
 *       201:
 *         description: Usu√°rio criado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               allOf:
 *                 - $ref: '#/components/schemas/ApiResponse'
 *                 - type: object
 *                   properties:
 *                     userId:
 *                       type: string
 *                       description: ID do usu√°rio criado
 *       400:
 *         description: Dados inv√°lidos
 *       401:
 *         description: Token inv√°lido ou ausente
 *       409:
 *         description: Nome de usu√°rio ou senha j√° existe
 *
 *   get:
 *     summary: Listar todos os usu√°rios
 *     description: Lista todos os usu√°rios do sistema
 *     tags: [Gerenciamento de Usu√°rios]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Lista de usu√°rios
 *         content:
 *           application/json:
 *             schema:
 *               allOf:
 *                 - $ref: '#/components/schemas/ApiResponse'
 *                 - type: object
 *                   properties:
 *                     users:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/UserDetails'
 *       401:
 *         description: Token inv√°lido ou ausente
 */
router.post('/users', authenticateToken, AuthController.createUser);
router.get('/users', authenticateToken, AuthController.listUsers);

/**
 * @swagger
 * /api/auth/users/update:
 *   put:
 *     summary: Atualizar informa√ß√µes do usu√°rio
 *     description: Permite atualizar nome e descri√ß√£o do usu√°rio (pr√≥prio usu√°rio ou admin)
 *     tags: [Gerenciamento de Usu√°rios]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UpdateUserRequest'
 *     responses:
 *       200:
 *         description: Usu√°rio atualizado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       401:
 *         description: Token inv√°lido
 *       403:
 *         description: Sem permiss√£o para atualizar este usu√°rio
 *       404:
 *         description: Usu√°rio n√£o encontrado
 */
router.put('/users/update', authenticateToken, AuthController.updateUser);

/**
 * @swagger
 * /api/auth/users/delete:
 *   delete:
 *     summary: Deletar usu√°rio
 *     description: Permite que administradores ou criadores deletem usu√°rios (exceto admin principal e pr√≥pria conta)
 *     tags: [Gerenciamento de Usu√°rios]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/DeleteUserRequest'
 *     responses:
 *       200:
 *         description: Usu√°rio deletado com sucesso
 *       400:
 *         description: ID do usu√°rio √© obrigat√≥rio
 *       401:
 *         description: Token inv√°lido ou ausente
 *       403:
 *         description: Sem permiss√£o para deletar (admin principal, pr√≥pria conta, ou permiss√µes insuficientes)
 *       404:
 *         description: Usu√°rio n√£o encontrado
 */
router.delete('/users/delete', authenticateToken, AuthController.deleteUser);

console.log('‚úÖ AuthRoutes carregado com sucesso:\t' + new Date().toISOString());

export default router;
